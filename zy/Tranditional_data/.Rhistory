`east` = "Region1",
`west` = "Region2",
`north` = "Region3",
`south` = "Region4"))%>%
pop_category = cut(total_pop,
breaks=c(0, 2062, 2917, 3862, 6612),
labels=c("Q1","Q2","Q3","Q4")) %>%
select(-tract_name, -fake_region) %>%
filter(region_new == "Region1" | region_new == "Region3")
View(baltimore)
bmore<- baltimore %>%
rename(tract_fips= tract_id,
population=population)%>%
mutate(poverty_rate= pop_poverty/population,
pop_density= population/land_area,
region_new=recode(fake_region,
`east` = "Region1",
`west` = "Region2",
`north` = "Region3",
`south` = "Region4"))%>%
pop_category = cut(total_pop,
breaks=c(0, 2062, 2917, 3862, 6612),
labels=c("Q1","Q2","Q3","Q4")) %>%
select(-tract_name, -fake_region) %>%
filter(region_new == "Region1" | region_new == "Region3")
bmore<- baltimore %>%
rename(tract_fips= tract_id,
population=population)%>%
mutate(poverty_rate= pop_poverty/population,
pop_density= population/land_area,
region_new=recode(fake_region,
`east` = "Region1",
`west` = "Region2",
`north` = "Region3",
`south` = "Region4"))%>%
pop_category = cut(population,
breaks=c(0, 2062, 2917, 3862, 6612),
labels=c("Q1","Q2","Q3","Q4")) %>%
select(-tract_name, -fake_region) %>%
filter(region_new == "Region1" | region_new == "Region3")
bmore<- baltimore %>%
rename(tract_fips= tract_id,
population=population)%>%
mutate(poverty_rate= pop_poverty/population,
pop_density= population/land_area,
region_new=recode(fake_region,
`east` = "Region1",
`west` = "Region2",
`north` = "Region3",
`south` = "Region4"))%>%
pop_category = cut(population,
breaks=c(0, 2062, 2917, 3862, 6612),
labels=c("Q1","Q2","Q3","Q4")) %>%
select(-tract_name, -fake_region) %>%
filter(region_new == "Region1" | region_new == "Region3")
bmore <- baltimore %>% # %>% means piping, or carry previous object to next step
rename(tract_fips = tract_id, # new name = current name
total_pop = population) %>% # tidyverse does not require $ when dealing with column names
mutate(poverty_rate = pop_poverty/total_pop, #creating new variables
pop_density = total_pop/area,
region_new = recode(fake_region, # recoding regions to something more descriptive
`east` = "Region1",
`west` = "Region2",
`north` = "Region3",
`south` = "Region4"),
pop_category = cut(total_pop,
breaks=c(0, 2062, 2917, 3862, 6612), # recategorizing population by quartile (run summary)
labels=c("Q1","Q2","Q3","Q4"))) %>%
select(-tract_name, -fake_region) %>% # delete certain columns, alternatively, keep certain columns without the - sign
filter(region_new == "Region1" | region_new == "Region3")
bmore <- baltimore %>% # %>% means piping, or carry previous object to next step
rename(tract_fips = tract_id, # new name = current name
total_pop = population) %>% # tidyverse does not require $ when dealing with column names
mutate(poverty_rate = pop_poverty/total_pop, #creating new variables
pop_density = total_pop/area,
region_new = recode(fake_region, # recoding regions to something more descriptive
`east` = "Region1",
`west` = "Region2",
`north` = "Region3",
`south` = "Region4"),
pop_category = cut(total_pop,
breaks=c(0, 2062, 2917, 3862, 6612), # recategorizing population by quartile (run summary)
labels=c("Q1","Q2","Q3","Q4"))) %>%
select(-tract_name, -fake_region) %>% # delete certain columns, alternatively, keep certain columns without the - sign
filter(region_new == "Region1" | region_new == "Region3")
ggplot(dat2010, aes(x=pop)) +
geom_histogram(col="black",
fill="#225566",
alpha = .5,
binwidth = 200) +
labs(x="population", y="counts") +
ggtitle("Population 2010")
dat2010 %>% mutate(perc.white = pop_white_nonhispanic/pop,
majority = cut(perc.white,
breaks = c(0, 0.5, 1),
labels = c("nonwhite", "white"))) %>%
filter(majority == "white") %>%
ggplot(aes(x=pop)) +
geom_histogram(col="black", fill="white",alpha = .5, binwidth = 200) +
labs(x="population", y="counts") +
ggtitle("Population 2010")
dat2000 %>%
mutate(perc.white = pop_white_nonhispanic/pop,
majority = cut(perc.white,
breaks = c(0, 0.5, 1),
labels = c("nonwhite", "white"))) %>%
drop_na(majority) %>%
ggplot(., aes(x = pop, y = pop_plus10, color = majority)) +
geom_point(size = 2) +
scale_color_manual(values=c("#999999", "#E69F00")) +
xlim(0, 8000) +
labs(x="pop 2000", y="pop 2010") +
geom_smooth(method = "lm", color = "red", se=FALSE)
dat2010 %>% mutate(perc.white = pop_white_nonhispanic/pop,
majority = cut(perc.white,
breaks = c(0, 0.5, 1),
labels = c("nonwhite", "white"))) %>%
drop_na(majority) %>%
ggplot(., aes(x=majority, y=median_hh_income,
fill = majority)) +
geom_boxplot(alpha = 0.7) +
labs(x="Race", y="Median HH Income") +
scale_fill_manual(values=c("#336699", "#666666"))
library(tidyverse)
setwd("/Users/apple/Desktop/CPLN501")
library(tidyverse)
setwd("/Users/apple/Desktop/CPLN501")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
library(nngeo)
library(units)
library(pacman)
library(lubridate)
library(tidycensus)
#set the API key
census_api= "7ef485ab67cffa9e33a4d14f97aae395bb5c011c"
census_api_key(census_api, install = TRUE)
acs_2022 <- load_variables(2022, dataset="acs5")
acsVaraibles <- c(totpop = "B01001_001",
tot_commute="B08006_001",
bikers ="B08006_014",
median_age="B01002_001"
)
Philiy_acs_2022 <- get_acs(geography="tract",
variables=acsVaraibles,
state="PA",
county="Philadelphia",
survey='acs5',
year=2022,
output="wide",
geometry=TRUE)
View(Philiy_acs_2022)
Philiy_acs_2022 <- Philiy_acs_2022 %>%
mutate(bike_rate = bikers/tot_commute)
Philiy_acs_2022 <- Philiy_acs_2022 %>%
mutate(bike_rate = bikersE/tot_commuteE)
st_write(Philiy_acs_2022, "Philiy_acs_2022.gpkg")
ibrary(ggplot2)
library(ggplot2)
# Create the data
flow <- seq(0, 2000, length.out = 100)
speed <- ifelse(flow <= 500, 60,
ifelse(flow <= 1000, 60 - 0.03 * (flow - 500),
ifelse(flow <= 1500, 45 - 0.04 * (flow - 1000),
30 - 0.02 * (flow - 1500))))
# Create a data frame
data <- data.frame(flow = flow, speed = speed)
ggplot(data, aes(x = flow, y = speed)) +
geom_line(color = "blue") +
geom_vline(xintercept = c(300, 700, 1000, 1300, 1600, 1800),
linetype = "dashed",
color = c("green", "lime", "yellow", "orange", "red", "darkred"))
ggplot(data, aes(x = flow, y = speed))
ggplot(data, aes(x = flow, y = speed)) +
geom_line(color = "blue") +
geom_vline(xintercept = c(300, 700, 1000, 1300, 1600, 1800),
linetype = "dashed",
color = c("green", "lime", "yellow", "orange", "red", "darkred")) +
annotate("text", x = c(100, 500, 850, 1150, 1450, 1700),
y = c(62, 62, 50, 45, 35, 25),
label = c("A", "B", "C", "D", "E", "F"),
color = c("green", "lime", "yellow", "orange", "red", "darkred"),
size = 4) +
labs(title = "Speed-Flow Diagram for a Major One-Way, Two-Lane Urban Arterial",
x = "Flow (vehicles per hour)",
y = "Speed (km/h)") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(limits = c(0, 2000)) +
scale_y_continuous(limits = c(0, 65)) +
theme(panel.grid.major = element_line(size = 0.8),
panel.grid.minor = element_line(size = 0.5))
ggplot(data, aes(x = flow, y = speed)) +
geom_line(color = "blue") +
geom_vline(xintercept = c(300, 700, 1000, 1300, 1600, 1800),
linetype = "dashed",
color = c("green", "blue", "yellow", "orange", "red", "darkred")) +
annotate("text", x = c(100, 500, 850, 1150, 1450, 1700),
y = c(62, 62, 50, 45, 35, 25),
label = c("A", "B", "C", "D", "E", "F"),
color = c("green", "blue", "yellow", "orange", "red", "darkred"),
size = 4) +
labs(title = "Speed-Flow Diagram for a Major One-Way, Two-Lane Urban Arterial",
x = "Flow (vehicles per hour)",
y = "Speed (km/h)") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(limits = c(0, 2000)) +
scale_y_continuous(limits = c(0, 65)) +
theme(panel.grid.major = element_line(size = 0.8),
panel.grid.minor = element_line(size = 0.5))
View(data)
ggplot(data, aes(x = flow, y = speed)) +
geom_point(color = "blue") +
geom_vline(xintercept = c(300, 700, 1000, 1300, 1600, 1800),
linetype = "dashed",
color = c("green", "blue", "yellow", "orange", "red", "darkred")) +
annotate("text", x = c(100, 500, 850, 1150, 1450, 1700),
y = c(62, 62, 50, 45, 35, 25),
label = c("A", "B", "C", "D", "E", "F"),
color = c("green", "blue", "yellow", "orange", "red", "darkred"),
size = 4) +
labs(title = "Speed-Flow Diagram for a Major One-Way, Two-Lane Urban Arterial",
x = "Flow (vehicles per hour)",
y = "Speed (km/h)") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(limits = c(0, 2000)) +
scale_y_continuous(limits = c(0, 65)) +
theme(panel.grid.major = element_line(size = 0.8),
panel.grid.minor = element_line(size = 0.5))
year <- c(1950, 1960, 1970, 1980, 1990, 2000, 2010)
population <- c(2071605,2002512,1948609,1688210,1585577,1517550,1526006)
dat <- cbind.data.frame(year, population)
mod.1 <- lm(population ~ year, data = dat)
summary(mod.1)
mod.2 <- lm(population ~ year+I(year^2) , data =dat)
summary(mod.2)
mod.3 <- lm(population ~ year + pop_lag, data = dat)
ASK: finally, let's try a model with lag
library(tidyverse)
#first, let's create a population with 10 year lag (i.e., shifting one row down)
dat <- dat %>% mutate(pop_lag = lag(population, 1))
mod.3 <- lm(population ~ year + pop_lag, data = dat)
summary(mod.3)
library(tidyverse)
library(sf)
library(tidycensus)
pluto <- st_read("labs_exercises/flood_risk_spatial_join/data/MapPLUTO24v3_1.gdb",
query = "select * from MapPLUTO_24v3_1_clipped where Borough = 'BK'", quiet = TRUE)
pluto <- st_read("MapPLUTO24v3_1.gdb",
query = "select * from MapPLUTO_24v3_1_clipped where Borough = 'BK'", quiet = TRUE)
pluto <- st_read("MapPLUTO24v3_1.gdb",
query = "select * from MapPLUTO_24v3_1_clipped where Borough = 'BK'", quiet = TRUE)
pluto <- st_read(("MapPLUTO24v3_1.gdb"),
query = "select * from MapPLUTO_24v3_1_clipped where Borough = 'BK'", quiet = TRUE)
pluto <- st_read(("MapPLUTO24v3_1.gdb"),
query = "select * from MapPLUTO_24v3_1_clipped where Borough = 'BK'", quiet = TRUE)
pluto <- st_read(("/Users/apple/Desktop/CPLN503/in_class_excercise/In_class_excercise_octo17th/MapPLUTO24v3_1.gdb"),
query = "select * from MapPLUTO_24v3_1_clipped where Borough = 'BK'", quiet = TRUE)
pluto <- pluto %>%
mutate(ARA = case_when(ResArea == 0 & UnitsRes != 0 ~ 1 * (BldgArea * (UnitsRes/UnitsTotal)) + ResArea,
ResArea > 0 ~ ResArea,
TRUE ~ 0))
bk_bg <- get_acs(geography = "block group",
variables = c(bg_tot_pop = "B03002_001",
bg_white_nh = "B03002_003" ,
bg_black_nh = "B03002_004",
bg_asian_nh = "B03002_006" ,
bg_native_hawaiian = "B03002_007",
bg_other_nh = "B03002_008",
bg_two_more_nh = "B03002_009",
bg_hispanic = "B03002_012"),
year = 2021, output = "wide",
geometry = TRUE, state = "NY",
county = "Kings", survey = "acs5",
progress = FALSE)
bk_tracts <-get_acs(geography = "tract",
variables = c(tract_tot_pop = "B03002_001",
tract_white_nh = "B03002_003",
tract_black_nh = "B03002_004",
tract_asian_nh = "B03002_006",
tract_native_hawaiian = "B03002_007",
tract_other_nh = "B03002_008" ,
tract_two_more_nh = "B03002_009",
tract_hispanic = "B03002_012" ),
year = 2021, output = "wide",
geometry = TRUE, state = "NY",
county = "Kings", survey = "acs5",
progress = FALSE)
pluto <- st_transform(pluto, crs = st_crs(bk_bg))
pluto <- pluto %>%
st_join(bk_bg %>% select(block_group_2021 = GEOID, 3, 5, 7, 9, 11, 13, 15, 17))
pluto <- pluto %>%
st_join(bk_tracts %>%
select(tract_2021 = GEOID, 3, 5, 7, 9, 11, 13, 15, 17))
pluto <- pluto %>%
select(Borough, Address, OwnerName, LotArea, BldgArea,
ResArea, UnitsRes, ARA, block_group_2021,
starts_with("bg_"), tract_2021, starts_with("tract_"))
bk_bg_units <- pluto |>
as_tibble() |>
group_by(block_group_2021) |>
summarise(bg_res_units = sum(UnitsRes, na.rm = TRUE),
bg_ARA = sum(ARA, na.rm = TRUE))
bk_tract_units <- pluto |>
as_tibble() |>
group_by(tract_2021) |>
summarise(tract_res_units = sum(UnitsRes, na.rm = TRUE),
tract_ARA = sum(ARA, na.rm = TRUE))
pluto <- pluto |>
left_join(bk_bg_units)
pluto <- pluto |>
left_join(bk_tract_units)
pluto <- pluto %>%
ungroup() %>%
mutate(bg_tot_dasym = case_when(UnitsRes == 0 & ResArea != 0 ~
bg_tot_popE * (ARA/bg_ARA),
UnitsRes > 0 ~ bg_tot_popE * (UnitsRes/bg_res_units),
TRUE ~ 0),
tract_tot_dasym = case_when(UnitsRes == 0 & ResArea != 0 ~
tract_tot_popE * (ARA/tract_ARA),
UnitsRes > 0 ~ tract_tot_popE * (UnitsRes/tract_res_units),
TRUE ~ 0))
tract_ru_totals <- pluto |>
as_tibble() |>
group_by(tract_2021) |>
summarise(tract_ru_est = sum(tract_tot_dasym, na.rm = TRUE))
tract_ru_totals <- tract_ru_totals |>
inner_join(bk_tracts |>
select(GEOID, tract_tot_popE), by = c("tract_2021" = "GEOID"))
floods <- st_read("https://data.cityofnewyork.us/api/geospatial/ezfn-5dsb?method=export&format=GeoJSON", )
floods <- st_make_valid(floods)
floods <- floods |>
st_transform(crs = st_crs(pluto)) |>
st_union(by_feature = FALSE) |>
st_as_sf()
floods <- floods |>
mutate(flood_plain = "100-Year") |>
rename(geometry = x)
bk_bg_floods <- bk_bg |>
st_join(floods) |>
as_tibble() |>
group_by(flood_plain) |>
summarise(flood_pop_bg = sum(bg_tot_popE, na.rm = TRUE)) |>
mutate(flood_plain = if_else(is.na(flood_plain), "Not in plain", flood_plain))
bk_tract_flood <- bk_tracts |>
st_join(floods) |>
as_tibble() |>
group_by(flood_plain) |>
summarise(flood_pop_tract = sum(tract_tot_popE, na.rm = TRUE)) |>
mutate(flood_plain = if_else(is.na(flood_plain), "Not in plain", flood_plain))
pluto_res <- pluto |>
filter(bg_tot_dasym > 0 | tract_tot_dasym > 0)
pluto_non_res <- pluto |>
filter((is.na(ResArea) | ResArea == 0) & (UnitsRes == 0 | is.na(UnitsRes)))
pluto_floods <- pluto_res |>
st_join(floods)
pluto_floods <- pluto_floods |>
as_tibble() |>
group_by(flood_plain) |>
summarise(flood_pop_bg_dasym = sum(bg_tot_dasym, na.rm = TRUE),
flood_pop_tract_dasym = sum(tract_tot_dasym, na.rm = TRUE)) |>
mutate(flood_plain = if_else(is.na(flood_plain), "Not in plain", flood_plain))
pluto_floods <- pluto_floods |>
left_join(bk_tract_flood) |>
left_join(bk_bg_floods)
View(pluto_floods)
pak::pkg_install("elipousson/crashapi")
install.packages("pak")
library(pak)
pak::pkg_install("elipousson/crashapi")
library(crashapi)
library(ggplot2)
md_summary <-
get_fars(
year = c(2010, 2021),
state = "MD",
api = "summary count"
)
ggplot(md_summary, aes(x = CaseYear, y = TotalFatalCounts)) +
geom_point(color = "red") +
geom_line(color = "red", group = 1) +
theme_minimal()
View(md_summary)
crashes_sf <-
get_fars(
year = c(2018, 2021),
state = "NC",
county = "Wake County",
geometry = TRUE
)
library(crashapi)
library(tidyverse)
crashes_autauga2022 <-
get_fars(
year = 2022,
state = "AL",
county = "Autauga County",
details = TRUE
)
View(crashes_autauga2022)
autauga2022<-crashes_autauga2022 %>%
select(CITYNAME,
FATALS)
View(autauga2022)
autauga2022$CEvents
CEvents <- autauga2022 %>%
group_by(CITYNAME) %>%
summarise(Fatalities = sum(FATALS))
library(crashapi)
library(tidyverse)
crashes_autauga2022 <-
get_fars(
year = 2022,
state = "AL",
county = "Autauga County",
details = TRUE
)
per <-read_csv("/Users/apple/Desktop/person.csv")
crashes_broome <-
get_fars(
year=2022,
state="NY",
county="Broome County",
details=TRUE
)
View(crashes_broome)
per %>%
select(AGE)
crashes_broome %>%
select(AGE)
library(crashapi)
library(tidyverse)
crashes_autauga2022 <-
get_fars(
year = 2022,
state = "AL",
county = "Autauga County",
details = TRUE
)
full <- bind_rows(crashes_autauga2022, .id = "column_label") %>%  select(where(is.list)) %>%
names() %>%
reduce(~ unnest_longer(.x, all_of(.y)), .init = full)
crashes_autauga2022 <- bind_rows(crashes_autauga2022, .id = "column_label") %>%  select(where(is.list)) %>%
names() %>%
reduce(~ unnest_longer(.x, all_of(.y)), .init = full)
full <- bind_rows(crashes_autauga2022, .id = "column_label") %>%  select(where(is.list)) %>%
names() %>%
reduce(~ unnest_longer(.x, all_of(.y)), .init = crashes_autauga2022)
View(full)
full <- full %>%
select(NPERSONS$AGE)
View(full)
View(full)
View(crashes_autauga2022)
crashes_autauga2022 %>%
select(NPersons)
persons<- crashes_autauga2022 %>%
select(NPersons)
View(persons)
View(full)
View(crashes_autauga2022)
View(persons)
write.csv(full, 'year.csv')
View(full)
full <- bind_rows(crashes_autauga2022, .id = "column_label") %>%
select(where(is.list))
View(full)
full <- bind_rows(crashes_autauga2022, .id = "column_label") %>%
select(where(is.list))%>%
names()
library(purrr)
full <- bind_rows(crashes_autauga2022, .id = "column_label") %>%
select(where(is.list))%>%
names() %>%
reduce(~ unnest_longer(.x, all_of(.y)), .init = crashes_autauga2022)
View(full)
full <- bind_rows(crashes_autauga2022, .id = "column_label") %>%
select(where(is.list))%>%
names() %>%
reduce(~ unnest_longer(.x, all_of(.y)), .init = crashes_autauga2022)%>%
select(NPersons$AGE)
full <- bind_rows(crashes_autauga2022, .id = "column_label") %>%
select(where(is.list))%>%
names() %>%
reduce(~ unnest_longer(.x, all_of(.y)), .init = crashes_autauga2022)%>%
select("NPersons$AGE")
rlang::last_trace()
full <- bind_rows(crashes_autauga2022, .id = "column_label") %>%
select(where(is.list))%>%
names() %>%
reduce(~ unnest_longer(.x, all_of(.y)), .init = crashes_autauga2022)
View(full)
age <- full %>%
select(contains("AGE"))
View(age)
head(full)
colnames()
str(full)
Npersons <- data.frame(full$NPersons)
View(Npersons)
View(full)
library(duckdb)
library(tidyverse)
con <- dbConnect(duckdb::duckdb(), dbdir = "crash.duckdb")
dbListTables(con)
setwd("/Users/apple/FARS/zy/Tranditional_data")
con <- dbConnect(duckdb::duckdb(), dbdir = "crash.duckdb")
bListTables(con)
dbListTables(con)
