t.test(mydata$MEDHHINC~mydata$DRINKING_D)
library(GGally)
# Predictors Correlation
library(corrr)
mydata[-1]%>%
correlate() %>%
autoplot() +
geom_text(aes(label = round(r, digits = 2)), size = 2) +
theme(text = element_text(family = "Lato"))
model1 <- glm(DRINKING_D~FATAL_OR_M+
OVERTURNED+ CELL_PHONE+ SPEEDING+ AGGRESSIVE+ DRIVER1617+ DRIVER65PLUS+ PCTBACHMOR+ MEDHHINC, data=mydata)
summary(model1)
confint <- exp(cbind(OR= coef(model1), confint(model1)))#just odds and 95% confidenc eration
confint
#view coefficients pvaleus m, odd ratio and confidenc eintervals together
model1coeff <- summary(model1)$coefficients
cbind(model1coeff, confint) %>% kable()
fit <- model1$fitted
cutoffs <- c(0.02,0.03,0.05,0.07,0.08,0.09,0.10,0.15,0.2,0.5)
# for (i in cutoffs){
# fit.binary <- (fit>i)
# CrossTable(fit.binary, mydata$DRINKING_D, prop.r=FALSE, prop.t=FALSE,
# prop.chisq=FALSE)
# }
library(caret)
predicted_probabilities <- predict(model1, mydata, type = "response")
thresholds <- c(0.02,0.03,0.05,0.07,0.08,0.09,0.1,0.15,0.20,0.5)
metrics <- data.frame(Threshold = thresholds, Sensitivity = NA, Specificity = NA, MisclassificationRate = NA)
mydata$DRINKING_D_f <- as.factor(mydata$DRINKING_D)
for (i in 1:length(thresholds)) {
threshold <- thresholds[i]
# Make predictions based on the threshold
predicted_classes <- ifelse(predicted_probabilities >= threshold, '1','0')
# Generate confusion matrix
cm <- confusionMatrix(factor(predicted_classes), mydata$DRINKING_D_f, positive = '1')
# Extract metrics
sensitivity <- cm$byClass["Sensitivity"]
specificity <- cm$byClass["Specificity"]
misclassification_rate <- 1 - cm$overall["Accuracy"]
# Store metrics in data frame
metrics[i, "Sensitivity"] <- sensitivity
metrics[i, "Specificity"] <- specificity
metrics[i, "MisclassificationRate"] <- misclassification_rate
}
# View results
print(metrics)
a <- cbind(mydata$DRINKING_D, fit)
head(a)
colnames(a) <- c("labels","predictions")
head(a)
roc <- as.data.frame(a)
pred <- prediction(roc$predictions, roc$labels)
roc.perf = performance(pred, measure = "tpr", x.measure="fpr")
plot(roc.perf)
abline(a=0,b=1)
opt.cut = function(perf, pred){
cut.ind = mapply(FUN=function(x, y, p){
d = (x - 0)^2 + (y-1)^2
ind = which(d == min(d))
c(sensitivity = y[[ind]], specificity = 1-x[[ind]],
cutoff = p[[ind]])
}, perf@x.values, perf@y.values, pred@cutoffs)
}
print(opt.cut(roc.perf, pred))
auc.perf = performance(pred, measure ="auc")
auc.perf@y.values
model2 <- glm(DRINKING_D ~FATAL_OR_M+
OVERTURNED+ CELL_PHONE+ SPEEDING+ AGGRESSIVE+ DRIVER1617+ DRIVER65PLUS, data=mydata)
fit2 <- model2$fitted
summary(model2)
confint <- exp(cbind(OR= coef(model2), confint(model2)))#just odds and 95% confidenc eration
confint
#view coefficients pvaleus m, odd ratio and confidenc eintervals together
model2coeff <- summary(model2)$coefficients
cbind(model2coeff, confint) %>% kable()
predicted_probabilities <- predict(model2, mydata, type = "response")
thresholds <- c(0.02,0.03,0.05,0.07,0.08,0.09,0.1,0.15,0.20,0.5)
metrics <- data.frame(Threshold = thresholds, Sensitivity = NA, Specificity = NA, MisclassificationRate = NA)
for (i in 1:length(thresholds)) {
threshold <- thresholds[i]
# Make predictions based on the threshold
predicted_classes <- ifelse(predicted_probabilities >= threshold, '1','0')
# Generate confusion matrix
cm <- confusionMatrix(factor(predicted_classes), mydata$DRINKING_D_f, positive = '1')
# Extract metrics
sensitivity <- cm$byClass["Sensitivity"]
specificity <- cm$byClass["Specificity"]
misclassification_rate <- 1 - cm$overall["Accuracy"]
# Store metrics in data frame
metrics[i, "Sensitivity"] <- sensitivity
metrics[i, "Specificity"] <- specificity
metrics[i, "MisclassificationRate"] <- misclassification_rate
}
# View results
print(metrics)
a <- cbind(mydata$DRINKING_D_f, fit2)
head(a)
colnames(a) <- c("labels","predictions")
head(a)
roc <- as.data.frame(a)
pred <- prediction(roc$predictions, roc$labels)
roc.perf = performance(pred, measure = "tpr", x.measure="fpr")
plot(roc.perf)
abline(a=0,b=1)
opt.cut = function(perf, pred){
cut.ind = mapply(FUN=function(x, y, p){
d = (x - 0)^2 + (y-1)^2
ind = which(d == min(d))
c(sensitivity = y[[ind]], specificity = 1-x[[ind]],
cutoff = p[[ind]])
}, perf@x.values, perf@y.values, pred@cutoffs)
}
print(opt.cut(roc.perf, pred))
auc.perf = performance(pred, measure ="auc")
auc.perf@y.values
library(glmnet)
datax <- mydata %>% select(
OVERTURNED, CELL_PHONE, SPEEDING, AGGRESSIVE, DRIVER1617, DRIVER65PLUS)
datax <- model.matrix(~ . - 1, data = datax)
datay <- mydata$DRINKING_D
pen <- glmnet(as.matrix(datax) , datay, family = "binomial")
fitpen <- pen$fitted
summary(pen)
confint <- exp(cbind(OR= coef(pen), confint(pen)))#just odds and 95% confidenc eration
#view coefficients pvaleus m, odd ratio and confidenc eintervals together
model1coeff <- summary(pen)$coefficients
coefficients
summary(pen)
summary(pen)
coefficents(pen)
library(crashapi)
library(ggplot2)
library(dplyr)
library(rstudioapi)
library(tidyr)
library(purrr)
# Set Up
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
state_fips<-read.csv('./data/fips-by-state.csv')#get state and counties
years= c(2010:2015)
View(state_fips)
# Functions for parsing
detailed <- list() #create empty list
for (x in state_fips$fips){ #loop across all states
counter=0
for (i in state_fips$){ #for the particular state, loop across all county names
#
# test <- detailed[1]
#unnest cols = c(CEvents, NMDrugs, NPersons, NmCrashes, NmImpairs, NmPriors, SafetyEQs, Vehicles)
full <- bind_rows(detailed, .id = "column_label") %>%  select(where(is.list)) %>%
names() %>%
reduce(~ unnest_longer(.x, all_of(.y)), .init = full)
# Functions for parsing
detailed <- list() #create empty list
for (x in state_fips$fips){ #loop across all states
counter=0
for (i in state_fips$){ #for the particular state, loop across all county names
for (x in state_fips$state){ #loop across all states
counter=0
for (i in state_fips$fips){ #for the particular state, loop across all county names
crashes_detailed <- #for each county, get the detailed crash data for the year
get_fars(
year = year,
state = x,
county= i,
details = TRUE
)
counter=counter+1
detailed[[length(detailed)+1]] <- crashes_detailed
cat(counter, x, i , "downloaded")#tracking
}
}
year= 2010 #set the year you want to use
# Functions for parsing
detailed <- list() #create empty list
for (x in state_fips$state){ #loop across all states
counter=0
for (i in state_fips$fips){ #for the particular state, loop across all county names
crashes_detailed <- #for each county, get the detailed crash data for the year
get_fars(
year = year,
state = x,
county= i,
details = TRUE
)
counter=counter+1
detailed[[length(detailed)+1]] <- crashes_detailed
cat(counter, x, i , "downloaded")#tracking
}
}
state_code <- state_fips %>% select(state) %>% distinct() %>% mutate(state_code = row_number())
View(state_code)
state_code <- read.csv('./data/us-state-ansi-fips.csv')
View(state_code)
state_fips <- state_fips %>% left_join(state_code, by=c('state'= 'stusps'))
View(state_fips)
state_fips <- state_fips %>% left_join(state_code, by=c('stusps'='state'))
state_fips <- state_fips %>% left_join(state_code, by=c('state'='stusps'))
state_fips<-read.csv('./data/fips-by-state.csv')#get state and counties
state_code <- read.csv('./data/us-state-ansi-fips.csv')
state_fips <- state_fips %>% left_join(state_code, by=c('state'='stusps'))
state_fips<-read.csv('./data/fips-by-state.csv')#get state and counties
state_code <- read.csv('./data/us-state-ansi-fips.csv')
state_fips <- state_fips %>% left_join(state_code, by=c('state'='stusps'))
View(state_code)
state_code$stusps <- substr(state_code$stusps 2, nchar(state_code$stusps))
state_fips <- state_fips %>% left_join(state_code, by=c('state'='stusps'))
state_fips<-read.csv('./data/fips-by-state.csv')#get state and counties
state_code <- read.csv('./data/us-state-ansi-fips.csv')
state_code$stusps <- substr(state_code$stusps 2, nchar(state_code$stusps))
state_code$stusps <- substr(state_code$stusps, 2, nchar(state_code$stusps))
state_fips <- state_fips %>% left_join(state_code, by=c('state'='stusps'))
state_fips$fips <- paste0(state_fips$st,state_fips$fips)
state_fips$fips <- sprintf("%02d", state_fips$fips)
state_fips$st <- sprintf("%02d", state_fips$st)
state_fips<-read.csv('./data/fips-by-state.csv')#get state and counties
state_code <- read.csv('./data/us-state-ansi-fips.csv')
state_code$stusps <- substr(state_code$stusps, 2, nchar(state_code$stusps))
state_fips <- state_fips %>% left_join(state_code, by=c('state'='stusps'))
state_fips$st <- sprintf("%02d", state_fips$st)
state_fips$fips <- paste0(state_fips$st,state_fips$fips)
# Functions for parsing
detailed <- list() #create empty list
for (x in state_fips$state){ #loop across all states
counter=0
for (i in state_fips$fips){ #for the particular state, loop across all county names
crashes_detailed <- #for each county, get the detailed crash data for the year
get_fars(
year = year,
state = x,
county= i,
details = TRUE
)
counter=counter+1
detailed[[length(detailed)+1]] <- crashes_detailed
cat(counter, x, i , "downloaded")#tracking
}
}
state_fips<-read.csv('./data/fips-by-state.csv')#get state and counties
state_fips$fips <- ifelse(nchar(state_fips$fips ) == 4, paste0("0", state_fips$fips ), state_fips$fips )
years= c(2010:2015)
year= 2010 #set the year you want to uses
# Functions for parsing
detailed <- list() #create empty list
for (x in state_fips$state){ #loop across all states
counter=0
for (i in state_fips$fips){ #for the particular state, loop across all county names
crashes_detailed <- #for each county, get the detailed crash data for the year
get_fars(
year = year,
state = x,
county= i,
details = TRUE
)
counter=counter+1
detailed[[length(detailed)+1]] <- crashes_detailed
cat(counter, x, i , "downloaded")#tracking
}
}
# Functions for parsing
detailed <- list() #create empty list
for (x in state_fips$state){ #loop across all states
counter=0
for (i in state_fips$fips){ #for the particular state, loop across all county names
crashes_detailed <- #for each county, get the detailed crash data for the year
get_fars(
year = year,
state = x,
county= i,
details = TRUE
)
counter=counter+1
detailed[[length(detailed)+1]] <- crashes_detailed
cat(counter, x, i , "downloaded")#tracking
}
}
rlang::last_trace()
state_fips$fips <- ifelse(nchar(state_fips$fips ) == 4, paste0("0", state_fips$fips ), state_fips$fips ) %>% as.numeric()
# Functions for parsing
detailed <- list() #create empty list
for (x in state_fips$state){ #loop across all states
counter=0
for (i in state_fips$fips){ #for the particular state, loop across all county names
crashes_detailed <- #for each county, get the detailed crash data for the year
get_fars(
year = year,
state = x,
county= i,
details = TRUE
)
counter=counter+1
detailed[[length(detailed)+1]] <- crashes_detailed
cat(counter, x, i , "downloaded")#tracking
}
}
state_fips$fips <- ifelse(nchar(state_fips$fips ) == 4, paste0("0", state_fips$fips ), state_fips$fips )
for (i in state_fips$fips){ #for the particular state, loop across all county names
crashes_detailed <- #for each county, get the detailed crash data for the year
get_fars(
year = year,
state = x,
county= i,
details = TRUE
)
counter=counter+1
detailed[[length(detailed)+1]] <- crashes_detailed
cat(counter, x, i , "downloaded")#tracking
}
for (x in state_fips$state){ #loop across all states
counter=0
for (i in state_fips$fips){ #for the particular state, loop across all county names
crashes_detailed <- #for each county, get the detailed crash data for the year
get_fars(
year = year,
state = x,
county= i,
details = TRUE
)
counter=counter+1
detailed[[length(detailed)+1]] <- crashes_detailed
cat(counter, x, i , "downloaded")#tracking
}
}
rlang::last_trace()
rlang::last_trace(drop = FALSE)
?get_fars_zip
2022 <- get_fars_zip(
year = 2022,
format = "csv",
path = NULL,
pr = FALSE,
aux = FALSE,
read = TRUE,
geometry = FALSE,
overwrite = FALSE
)
get_fars_zip(
year = 2022,
format = "csv",
path = NULL,
pr = FALSE,
aux = FALSE,
read = TRUE,
geometry = TRUE,
overwrite = FALSE
)
get_fars_zip(
year = 2021,
format = "csv",
path = NULL,
pr = FALSE,
aux = FALSE,
read = TRUE,
geometry = TRUE,
overwrite = FALSE
)
get_fars_zip(
year = 2021,
format = "csv",
path = NULL,
pr = FALSE,
aux = FALSE,
read = TRUE,
geometry =TRUE,
overwrite = FALSE
)
for (i in state_fips$fips){ #for the particular state, loop across all county names
crashes_detailed <- #for each county, get the detailed crash data for the year
get_fars(
year = year,
state = x,
county= i,
details = TRUE
)
counter=counter+1
detailed[[length(detailed)+1]] <- crashes_detailed
cat(counter, x, i , "downloaded")#tracking
}
get_fars
?get_fars
state_fips$fips  <- substr(state_fips$fips , 3, nchar(state_fips$fips ))
# Functions for parsing
detailed <- list() #create empty list
for (x in state_fips$state){ #loop across all states
counter=0
for (i in state_fips$fips){ #for the particular state, loop across all county names
crashes_detailed <- #for each county, get the detailed crash data for the year
get_fars(
year = year,
state = x,
county= i,
details = TRUE
)
counter=counter+1
detailed[[length(detailed)+1]] <- crashes_detailed
cat(counter, x, i , "downloaded")#tracking
}
}
#
# test <- detailed[1]
#unnest cols = c(CEvents, NMDrugs, NPersons, NmCrashes, NmImpairs, NmPriors, SafetyEQs, Vehicles)
full <- bind_rows(detailed, .id = "column_label") %>%  select(where(is.list)) %>%
names() %>%
reduce(~ unnest_longer(.x, all_of(.y)), .init = full)
#
# test <- detailed[1]
#unnest cols = c(CEvents, NMDrugs, NPersons, NmCrashes, NmImpairs, NmPriors, SafetyEQs, Vehicles)
full <- bind_rows(detailed, .id = "column_label") %>%  select(where(is.list)) %>%
names() %>%
reduce(~ unnest_longer(.x, all_of(.y)), .init = full)
detailed[[length(detailed)+1]] <- crashes_detailed
cat(counter, x, i , "downloaded")#tracking
for (i in state_fips$fips){ #for the particular state, loop across all county names
crashes_detailed <- #for each county, get the detailed crash data for the year
get_fars(
year = year,
state = x,
county= i,
details = TRUE
)
counter=counter+1
detailed[[length(detailed)+1]] <- crashes_detailed
cat(counter, x, i , "downloaded")#tracking
}
for (x in state_fips$state){ #loop across all states
counter=0
for (i in state_fips$fips){ #for the particular state, loop across all county names
crashes_detailed <- #for each county, get the detailed crash data for the year
get_fars(
year = year,
state = x,
county= i,
details = TRUE
)
counter=counter+1
detailed[[length(detailed)+1]] <- crashes_detailed
cat(counter, x, i , "downloaded")#tracking
}
}
View(detailed)
#
# test <- detailed[1]
#unnest cols = c(CEvents, NMDrugs, NPersons, NmCrashes, NmImpairs, NmPriors, SafetyEQs, Vehicles)
full <- bind_rows(detailed, .id = "column_label") %>%  select(where(is.list)) %>%
names() %>%
reduce(~ unnest_longer(.x, all_of(.y)), .init = full)
#
# test <- detailed[1]
#unnest cols = c(CEvents, NMDrugs, NPersons, NmCrashes, NmImpairs, NmPriors, SafetyEQs, Vehicles)
full <- bind_rows(detailed, .id = "column_label") %>%  select(where(is.list)) %>%
names()
#
# test <- detailed[1]
#unnest cols = c(CEvents, NMDrugs, NPersons, NmCrashes, NmImpairs, NmPriors, SafetyEQs, Vehicles)
full <- bind_rows(detailed, .id = "column_label") %>%  select(where(is.list)) %>%
reduce(~ unnest_longer(.x, all_of(.y)), .init = full)
#
# test <- detailed[1]
#unnest cols = c(CEvents, NMDrugs, NPersons, NmCrashes, NmImpairs, NmPriors, SafetyEQs, Vehicles)
full <- bind_rows(detailed, .id = "column_label") %>%  select(where(is.list)) %>%
reduce(~ unnest_longer(.x, all_of(.y)), .init = full)
#
# test <- detailed[1]
#unnest cols = c(CEvents, NMDrugs, NPersons, NmCrashes, NmImpairs, NmPriors, SafetyEQs, Vehicles)
full <- bind_rows(detailed, .id = "column_label") %>%  select(where(is.list)) %>%
names() %>%
reduce(~ unnest_longer(.x, all_of(.y)), .init = full)
#
# test <- detailed[1]
#unnest cols = c(CEvents, NMDrugs, NPersons, NmCrashes, NmImpairs, NmPriors, SafetyEQs, Vehicles)
full <- bind_rows(detailed, .id = "column_label") %>%  select(where(is.list)) %>%
names() %>%
reduce(~ unnest_longer(.x, all_of(.y)), .init = full)
#
# test <- detailed[1]
#unnest
cols = c(CEvents, NMDrugs, NPersons, NmCrashes, NmImpairs, NmPriors, SafetyEQs, Vehicles)
full <- bind_rows(detailed, .id = "column_label") %>%  select(where(is.list)) %>%
names() %>%
reduce(~ unnest_longer(.x, all_of(.y)), .init = full)
full <- bind_rows(detailed, .id = "column_label") %>%  select(where(is.list)) %>%
names() %>%
reduce(~ unnest_longer(.x, all_of(.y)), .init = cols)
#
# test <- detailed[1]
#unnest
cols = c(CEvents, NMDrugs, NPersons, NmCrashes, NmImpairs, NmPriors, SafetyEQs, Vehicles)
#
# test <- detailed[1]
#unnest
cols = c('CEvents', 'NMDrugs', 'NPersons', 'NmCrashes', 'NmImpairs', 'NmPriors', 'SafetyEQs', 'Vehicles')
full <- bind_rows(detailed, .id = "column_label") %>%  select(where(is.list)) %>%
names() %>%
reduce(~ unnest_longer(.x, all_of(.y)), .init = cols)
full <- bind_rows(detailed, .id = "column_label") %>%  select(where(is.list)) %>%
names()
reduce(~ unnest_longer(.x, all_of(.y)), .init = full)
full <- bind_rows(detailed, .id = "column_label") %>%  select(where(is.list)) %>%
names() %>%
reduce(~ unnest_longer(.x, all_of(.y)), .init = full)
full <- bind_rows(detailed, .id = "column_label")
View(full)
full <- bind_rows(detailed, .id = "column_label") %>% unnest(,cols=everything())
for (col in names(df)[nested_columns]) {
nested_columns <- sapply(full, is.list)
nested_columns
nested_columns <- sapply(full, is.list)
unnested_df <- unnest(full, cols = all_of(col))
for (col in names(full)[nested_columns]) {
unnested_df <- unnest(full, cols = all_of(col))
}
